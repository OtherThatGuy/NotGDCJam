<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Manager</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
//card coordinates
first_row = 416;
second_row = 576;
third_row = 736;

first_column = 88;
second_column = 280;
third_column = 472;

//initializing
for(var i = 0; i &lt; 3; i++) {
 for(var j = 0; j &lt; 3; j++) {
    card_grid[i,j] = 0;
    selected[i,j] = false;
 }
}

//randomizing
for(var i = 0; i &lt; 3; i++) {
 for(var j = 0; j &lt; 3; j++) {
    var card = 0;
    card[0] = choose(shapes.octagon, shapes.circle, shapes.diamond);
    card[1] = choose(colors.red, colors.blue, colors.lime);
    card[2] = choose(size.small, size.medium, size.big);
    card_grid[i,j] = card;
 
 }
}

sets = 0;
current_x = -1;
current_y = -1;

bounce = 0;

//which cards have been selected?
card_count = 0;

selected_cards[0,0] = -1;
selected_cards[0,1] = -1;

selected_cards[1,0] = -1;
selected_cards[1,1] = -1;

selected_cards[2,0] = -1;
selected_cards[2,1] = -1;

//before going back timer
max_timer = room_speed * 60;
timer = max_timer;
done = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (timer != 0) {
    timer = max(0,timer-1);
} else {
    done = true;
    
}

if (done) {
//card highlighting
bounce = Wave(-16,16,3,0);

for(var i = 0; i &lt; 3; i++) {
 for(var j = 0; j &lt; 3; j++) {
  var card_x, card_y;
 
  switch(i){ 
   case 0:
   card_x = first_row;
   break;
   case 1:
   card_x = second_row;
   break;
   case 2:
   card_x = third_row;
   break;
  }
 
  switch(j){ 
   case 0:
   card_y = first_column;
   break;
   case 1:
   card_y = second_column;
   break;
   case 2:
   card_y = third_column;
   break;
  }
  
   if (point_in_rectangle(mouse_x,mouse_y, card_x, card_y, card_x+128, card_y+160)) {

    current_x = i;
    current_y = j;
    
    if (mouse_check_button_pressed(mb_left)) {
       if (card_count != 3 and selected[current_x,current_y] == false) { 
        selected_cards[card_count,0] = current_x;
        selected_cards[card_count,1] = current_y;
        selected[current_x,current_y] = true;
        card_count += 1;
       }
     
    }
    
    
   } else {
    if (current_x = i and current_y = j) {
     current_x = -1;
     current_y = -1;
    }
   }
  
 }
}


//set logic
if (card_count = 3) {
  //check the features, whether they are all the same or different
  var shape = false, color = false, ssize = false;
  
  var card_1 = card_grid[selected_cards[0,0], selected_cards[0,1]];
  var card_2 = card_grid[selected_cards[1,0], selected_cards[1,1]];
  var card_3 = card_grid[selected_cards[2,0], selected_cards[2,1]];
  
  //shapes
  if (card_1[0] = card_2[0] and card_2[0] = card_3[0]) {
   shape = true;
  }
  
  if (card_1[0] != card_2[0] and card_2[0] != card_3[0] and card_3[0] != card_1[0] and card_1[0] != card_3[0]) {
   shape = true
  }
  
  //colors
  if (card_1[1] = card_2[1] and card_2[1] = card_3[1]) {
   color = true;
  }
  
  if (card_1[1] != card_2[1] and card_2[1] != card_3[1] and card_3[1] != card_1[1] and card_1[1] != card_3[1]) {
   color = true
  }
  
  //sizes
  if (card_1[2] = card_2[2] and card_2[2] = card_3[2]) {
   ssize = true;
  }
  
  if (card_1[2] != card_2[2] and card_2[2] != card_3[2] and card_3[2] != card_1[2] and card_1[2] != card_3[2]) {
   ssize = true
  }
  
  if (shape == true and color == true and ssize == true) {
   sets += 1;
   clean_cards(true);
  }
  
  clean_cards(false);
}

if (keyboard_check_pressed(vk_space)) {
 clean_cards(true);
}

if (mouse_check_button_pressed(mb_right)) {
 clean_cards(false);
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(1280,720);
draw_sprite(spr_score,0,0,0);
draw_set_font(fnt_1);
draw_set_halign(fa_left);
draw_set_valign(fa_left);
draw_text_colour(0,0,"Sets: " + string(sets) ,c_white,c_white,c_white,c_white,1);

//card drawing
for(var i = 0; i &lt; 3; i++) {
 for(var j = 0; j &lt; 3; j++) {
 var card_x = 0, card_y = 0;
 
 switch(i){ 
  case 0:
  card_x = first_row;
  break;
  case 1:
  card_x = second_row;
  break;
  case 2:
  card_x = third_row;
  break;
 }
 
 switch(j){ 
  case 0:
  card_y = first_column;
  break;
  case 1:
  card_y = second_column;
  break;
  case 2:
  card_y = third_column;
  break;
 }
 
 var card = card_grid[i,j];
 var highlight = false;
 
 if (selected[i,j] == true) { highlight = true; card_y += bounce;}
 if (selected[i,j] == false and current_x = i and current_y = j) { card_y += bounce;}
 
 draw_card(card_x,card_y,card[0], card[1] ,card[2],highlight);
 
 }
}

draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
draw_set_colour(c_white);
draw_text(640,720,"Press [Space] to reshuffle, [Right click] to deselect cards.");
/*
draw_card(first_row,first_column,shapes.octagon, colors.red ,size.big);
draw_card(first_row,second_column,shapes.circle,colors.lime, size.medium);
draw_card(first_row,third_column,shapes.diamond,colors.blue, size.small);

draw_card(second_row,first_column,shapes.octagon, colors.red ,size.big);
draw_card(second_row,second_column,shapes.circle,colors.lime, size.medium);
draw_card(second_row,third_column,shapes.diamond,colors.blue, size.small);

draw_card(third_row,first_column,shapes.octagon, colors.red ,size.big);
draw_card(third_row,second_column,shapes.circle,colors.lime, size.medium);
draw_card(third_row,third_column,shapes.diamond,colors.blue, size.small);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
